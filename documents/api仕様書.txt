# API仕様書

**最終更新日: 2025/11/01**

---

## 1. 認証 (Authentication)

本APIのエンドポイントは、アクセス方法に応じて2種類の認証方式に対応しています。いずれかの方法で認証されていないリクエストは、`401 Unauthorized`またはログインページへのリダイレクトを返します。

### 1.1 APIクライアント用: Bearerトークン認証

- **POST** `/api/v1/login/token`
- **説明**: ユーザー名とパスワードで認証し、APIへのアクセスに使用するBearerトークンを返す。
- **リクエスト (application/x-www-form-urlencoded)**:
    - `username`: string (メールアドレス)
    - `password`: string
- **レスポンス (application/json)**:
    ```json
    {
      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "token_type": "bearer"
    }
    ```
- **利用方法**: このエンドポイントで取得した `access_token` を、以降のAPIリクエストの `Authorization` ヘッダーに `Bearer <トークン>` の形式で含める必要があります。

### 1.2 ブラウザ用: クッキーベース認証
- **POST** `/token`
- **説明**: ユーザー名（メールアドレス）とパスワードで認証し、成功した場合はユーザーの役割に応じたダッシュボードページへリダイレクトする。認証トークンはHTTPOnlyのクッキーにセットされるため、ブラウザからの後続リクエストは自動的に認証される。

---

## 2. システム管理者向けAPI (`/system_admin/api/`)

**【権限】: `system_admin`**

### 2.1 運営者アカウント管理
- **GET** `/api/operators`
    - **説明**: 全ての運営者アカウントのリストを返す。
- **POST** `/api/operators`
    - **説明**: 新しい運営者アカウントを作成する。
    - **リクエストボディ**: `{"email": "...", "password": "...", "role": "operator"}`
- **DELETE** `/api/operators/{user_id}`
    - **説明**: 指定されたIDの運営者アカウントを削除する。

### 2.2 孤立データ管理
- **GET** `/api/orphaned-photographers`
    - **説明**: 所有者(`created_by_operator_id`)がいない、または存在しない運営者に紐づく撮影者アカウントを検索して返す。
- **PUT** `/api/photographers/{photographer_id}/assign-operator`
    - **説明**: 孤立した撮影者アカウントに、既存の運営者を所有者として割り当てる。
    - **リクエストボディ**: `{"operator_id": "..."}`
- **DELETE** `/api/orphaned-photographers/{photographer_id}`
    - **説明**: 孤立した撮影者アカウントを完全に削除する。
- **GET** `/api/orphaned-image-groups`
    - **説明**: 所有者(`operator_id`)がいない、または存在しない運営者に紐づく画像グループのリスト（グループIDとアイテム数）を返す。
- **GET** `/api/image-groups/download/{group_id}`
    - **説明**: 指定された孤立画像グループに属する全ての元画像をZIPファイルとしてダウンロードする。ZIPファイル内は、元の所有者である運営者IDごとにフォルダ分けされる。
- **DELETE** `/api/image-groups/{group_id}`
    - **説明**: 指定された孤立画像グループに属する全てのドキュメントと画像ファイルを完全に削除する。

---

## 3. 運営者向けAPI (`/admin/api/`)

**【権限】: `operator`**

**【重要】** このセクションのAPIはすべて、認証された運営者自身のデータのみを対象とします。

- **GET** `/api/photographers`
    - **説明**: ログイン中の運営者が作成した撮影者アカウントのリストを返す。
- **POST** `/api/photographers`
    - **説明**: 新しい撮影者アカウントを作成し、ログイン中の運営者に紐付ける。
    - **リクエストボディ**: `{"email": "...", "password": "...", "role": "photographer"}`
- **DELETE** `/api/photographers/{user_id}`
    - **説明**: ログイン中の運営者が作成した撮影者アカウントの中から、指定されたIDのアカウントを削除する。
- **GET** `/api/groups`
    - **説明**: ログイン中の運営者に紐づく画像グループの一覧を、アイテム数や最終更新日と共に返す。
- **GET** `/api/items`
    - **説明**: 指定された`group_id`に属する画像アイテムの一覧を返す（ログイン中の運営者のデータに限る）。
    - **クエリパラメータ**: `group_id` (string, 必須)

---

## 4. 撮影者・運営者共通API (`/photographer/`)

**【権限】: `photographer` または `operator`**

- **POST** `/temp_upload`
    - **説明**: 画像を一時保存し、サムネイルを返す。ファイル名は`{operator_id}_{group_id}_{photographer_id}_{timestamp}`の形式で生成される。
    - **リクエスト (multipart/form-data)**:
        - `file`: 画像ファイル
        - `group_id`: string
        - `operator_id`: string (任意。指定されない場合、ログインユーザーが運営者であればそのIDが使われる)
- **POST** `/finalize_upload`
    - **説明**: 一時保存された画像を本登録する。`operator_id`が画像ドキュメントに記録される。
    - **リクエスト (application/json)**:
        - `group_id`: string
        - `operator_id`: string (任意。同上)
        - `filenames_data`: array of objects `[{"filename": "...", "thumbnail_filename": "..."}]`
        - `quality`: string
        - `comment`: array of strings
- **POST** `/temp_delete`
    - **説明**: 直近に一時保存した画像を削除する。
- **GET** `/temp_list`
    - **説明**: 現在一時保存されているファイルリストを返す。
- **GET** `/users/me`
    - **説明**: 現在ログインしているユーザー（撮影者または運営者）の基本情報を返す。

---
