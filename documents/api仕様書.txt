# API仕様書

**最終更新日: 2025/10/29**

---

## 認証

本APIのほとんどのエンドポイントは、認証を必要とします。
クライアントは `/token` エンドポイントで取得したJWTを、以降のリクエストでHTTPOnlyクッキー (`access_token`) に含めて送信する必要があります。

### 1. 認証トークン取得
- **POST** `/token`
- **説明**: ユーザー名（メールアドレス）とパスワードで認証し、アクセストークンを生成して返す。トークンはHTTPOnlyのクッキーにもセットされる。
- **リクエスト (application/x-www-form-urlencoded)**:
    - `username`: string (メールアドレス)
    - `password`: string
- **レスポンス例**:
    ```json
    {
      "access_token": "ey...",
      "token_type": "bearer",
      "role": "operator" // or "photographer"
    }
    ```

### 2. ログアウト
- **POST** `/logout`
- **説明**: ユーザーをログアウトさせる。HTTPOnlyの`access_token`クッキーを削除する。
- **リクエストボディ**: なし
- **レスポンス例**:
    ```json
    {"message": "Logout successful"}
    ```

---

## 撮影者・運営者共通エンドポイント `/photographer`

**【権限】: `photographer` または `operator`**

### 3. ログインユーザー情報取得
- **GET** `/photographer/users/me`
- **説明**: 現在ログインしている撮影者または運営者のユーザー情報を返す。
- **レスポンス例**:
    ```json
    {
        "id": "...",
        "email": "user@example.com",
        "role": "photographer",
        "is_active": true
    }
    ```

### 4. 画像一時アップロード
- **POST** `/photographer/temp_upload`
- **説明**: 画像を一時保存し、サムネイルを返す。認証トークンからユーザーIDを特定する。
- **リクエスト (multipart/form-data)**:
    - `file`: 画像ファイル
    - `group_id`: string
- **レスポンス例**:
    ```json
    {
      "thumbnail": "<base64 string>",
      "filename": "groupid_userid_yyyymmddhhmmssfff.png"
    }
    ```

### 5. 一時画像削除
- **POST** `/photographer/temp_delete`
- **説明**: ログインユーザーが直近で一時保存した画像を1枚削除する。
- **リクエスト (application/json)**:
    - `group_id`: string
- **レスポンス例**:
    ```json
    {"deleted": "filename.png"}
    ```

### 6. アップロード確定
- **POST** `/photographer/finalize_upload`
- **説明**: 一時保存画像を本登録する。
- **リクエスト (application/json)**:
    - `group_id`: string
    - `filenames`: string配列
    - `quality`: string
    - `comment`: string配列
- **レスポンス例**:
    ```json
    {"success": true}
    ```

---

## 管理者向けエンドポイント `/admin`

**【権限】: `operator`**

### 7. ログインユーザー情報取得 (管理者)
- **GET** `/admin/users/me`
- **説明**: 現在ログインしている運営者のユーザー情報を返す。
- **レスポンス**: `/photographer/users/me` と同様。

### 8. 撮影者アカウント管理
- **GET** `/admin/manage-photographers`: 管理ページ(HTML)を返す。
- **GET** `/admin/photographers`: 撮影者一覧(JSON)を返す。
- **POST** `/admin/photographers`: 新規撮影者を作成する。
- **DELETE** `/admin/photographers/{user_id}`: 撮影者を削除する。

### 9. QRコード生成
- **GET** `/admin/generate_qr`: 生成ページ(HTML)を返す。
- **POST** `/admin/generate_qr`: QRコードを生成してHTML内に表示する。

### 10. その他管理機能
- `/admin/search`: 登録画像一覧ページ(HTML)
- `/admin/detail/{item_id}`: 画像詳細ページ(HTML)
- `/admin/delete/{item_id}`: 画像削除処理
- `/admin/statistics`: 統計情報ページ(HTML)
- `/admin/force_reset`: 仮登録データ初期化ページ(HTML)と初期化処理

(※管理者向けエンドポイントの詳細は、実装に合わせて要追記)

---

## 外部システム向けエンドポイント `/external_api`

（変更なし）

---