# API仕様書

**最終更新日: 2025/10/29**

---

## 認証

本APIのほとんどのエンドポイントは、認証を必要とします。
クライアントは `/token` エンドポイントで取得したJWTを、以降のリクエストでHTTPOnlyクッキー (`access_token`) に含めて送信する必要があります。

### 1. 認証トークン取得とリダイレクト
- **POST** `/token`
- **説明**: ユーザー名（メールアドレス）とパスワードで認証し、成功した場合はユーザーの役割に応じたダッシュボードページへリダイレクトする。認証トークンはHTTPOnlyのクッキーにセットされる。
- **リクエスト (application/x-www-form-urlencoded)**:
    - `username`: string (メールアドレス)
    - `password`: string
- **レスポンス**: 認証成功時、HTTP 303 See Other でリダイレクト。失敗時は `/login` ページへエラーメッセージ付きでリダイレクト。

### 2. ログアウト
- **POST** `/logout`
- **説明**: ユーザーをログアウトさせ、ログインページへリダイレクトする。HTTPOnlyの`access_token`クッキーは削除される。
- **リクエストボディ**: なし
- **レスポンス**: HTTP 303 See Other で `/login` へリダイレクト。

---

## システム管理者向けエンドポイント `/system_admin`

**【権限】: `system_admin`**

### 2.1 ログインユーザー情報取得 (システム管理者)
- **GET** `/system_admin/users/me`
- **説明**: 現在ログインしているシステム管理者のユーザー情報を返す。
- **レスポンス**: `/photographer/users/me` と同様。

---

## 撮影者・運営者共通エンドポイント `/photographer`

**【権限】: `photographer` または `operator`**

### 3. ログインユーザー情報取得
- **GET** `/photographer/users/me`
- **説明**: 現在ログインしている撮影者または運営者のユーザー情報を返す。
- **レスポンス例**:
    ```json
    {
        "id": "...",
        "email": "user@example.com",
        "role": "photographer",
        "is_active": true
    }
    ```

### 4. 画像一時アップロード
- **POST** `/photographer/temp_upload`
- **説明**: 画像を一時保存し、サムネイルを返す。認証トークンからユーザーIDを特定する。フルサイズ画像とサムネイル画像の両方がGridFSに一時保存される。
- **リクエスト (multipart/form-data)**:
    - `file`: 画像ファイル
    - `group_id`: string
- **レスポンス例**:
    ```json
    {
      "thumbnail": "<base64 string>",
      "filename": "groupid_userid_yyyymmddhhmmssfff_full.jpeg",
      "thumbnail_filename": "groupid_userid_yyyymmddhhmmssfff_thumb.jpeg",
      "is_thumbnail_scaled_down": true // サムネイルが縮小されたかどうか
    }
    ```

### 5. 一時画像削除
- **POST** `/photographer/temp_delete`
- **説明**: ログインユーザーが直近で一時保存したフルサイズ画像とサムネイル画像を削除する。
- **リクエスト (application/json)**:
    - `group_id`: string
- **レスポンス例**:
    ```json
    {"deleted": "filename.jpeg"}
    ```

### 6. アップロード確定
- **POST** `/photographer/finalize_upload`
- **説明**: 一時保存画像を本登録する。フルサイズ画像とサムネイル画像の両方の`temporary`フラグを`false`に更新する。
- **リクエスト (application/json)**:
    - `group_id`: string
    - `filenames_data`: array of objects (各オブジェクトは`filename`と`thumbnail_filename`を含む)
        ```json
        [
          {"filename": "full_image1.jpeg", "thumbnail_filename": "thumb_image1.jpeg"},
          {"filename": "full_image2.jpeg", "thumbnail_filename": "thumb_image2.jpeg"}
        ]
        ```
    - `quality`: string
    - `comment`: string配列
- **レスポンス例**:
    ```json
    {"success": true}
    ```

---

## 管理者向けエンドポイント `/admin`

**【権限】: `operator`**

### 7. ログインユーザー情報取得 (管理者)
- **GET** `/admin/users/me`
- **説明**: 現在ログインしている運営者のユーザー情報を返す。
- **レスポンス**: `/photographer/users/me` と同様。

### 8. 撮影者アカウント管理
- **GET** `/admin/manage-photographers`: 管理ページ(HTML)を返す。
- **GET** `/admin/photographers`: 撮影者一覧(JSON)を返す。
- **POST** `/admin/photographers`: 新規撮影者を作成する。
- **DELETE** `/admin/photographers/{user_id}`: 撮影者を削除する。

### 9. QRコード生成
- **GET** `/admin/generate_qr`: 生成ページ(HTML)を返す。
- **POST** `/admin/generate_qr`: QRコードを生成してHTML内に表示する。

### 10. 登録画像の階層的検索
- **GET** `/admin/search`
- **説明**: 登録画像をグループIDの階層で検索・表示する。クエリパラメータの有無でレスポンス形式が変わる。
- **クエリパラメータ (任意)**:
    - `group_id`: string
- **レスポンス**:
    - **パラメータなしの場合 (JSON)**: グループIDの一覧と各アイテム数を、最新更新順で返す。
        ```json
        {
          "groups": [
            {
              "_id": "GROUP_001",
              "item_count": 15,
              "last_updated": "2025-10-30T12:30:00Z",
              "first_created": "2025-10-29T10:00:00Z"
            },
            ...
          ]
        }
        ```
    - **`group_id`指定の場合 (HTML)**: そのグループIDに所属する画像一覧ページのHTMLを返す。

### 11. グループ一覧データ取得API
- **GET** `/admin/api/groups`
- **説明**: グループIDの一覧と各アイテム数をJSON形式で返す。管理画面のフォルダ表示に使用される。
- **レスポンス**: `/admin/search`のパラメータなしの場合と同様。

### 12. グループ内アイテム一覧取得API
- **GET** `/admin/api/items`
- **説明**: 指定された`group_id`に所属するアイテム一覧を部分HTML形式で返す。各アイテムのサムネイル画像データがBase64エンコードされて含まれる。
- **クエリパラメータ**:
    - `group_id`: string (必須)
- **レスポンス**: `templates/admin/_search_results.html`のレンダリング結果。

### 13. その他管理機能
- `/admin/detail/{item_id}`: 画像詳細ページ(HTML)。詳細表示時にはフルサイズ画像が読み込まれる。
- `/admin/delete/{item_id}`: 画像削除処理
- `/admin/statistics`: 統計情報ページ(HTML)
- `/admin/force_reset`: 仮登録データ初期化ページ(HTML)と初期化処理

(※管理者向けエンドポイントの詳細は、実装に合わせて要追記)

---

## 外部システム向けエンドポイント `/external_api`

（変更なし）

---